 */
package example.dataformat;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import ix.core.controllers.EntityFactory;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;
import org.mockito.Mock;

/**
 *
 * @author mitch
 */
public class SquenceOutputSerializationTest {
    
    public SquenceOutputSerializationTest() {
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }

    @Test
    public void testOutputFormatting() {
        String view ="full";
        Map<String, Object> ourLinks = new LinkedHashMap<>();
        Double[] data = new Double[1];
        data[0] = 391.2;
        Object obj = 391.2d;
        
        JsonNode experiment = new JsonNode();
        
        EntityFactory.EntityMapper entityMapper = EntityFactory.EntityMapper.getByView(view);
        ourLinks.putAll(entityMapper.convertValue(entityMapper.toJsonNode(obj), new TypeReference<Map<String, Object>>() {
            }));

        assertTrue( ourLinks.size()>0);
    }
